////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// WE not ME (Bitcoin Indicator Angels)
//
// Telegram: https://t.me/we_not_me
//
// David Stevens <mail.davro@gmail.com>
// 
// Donations are accepted here
// Bitcoin: 3Ph9wP4vgASFbFP9DAabZETycXY66ebA8Y
// 
//
// Signal   Timeframe   Type    Number  PlotNumber
//
// Cycle    Daily       Green   1       .
// Cycle    Daily       Red     2       .
// DCA      Daily       Green   3       .
// DCA      Daily       Red     4       .
// LAMB     Daily       Green   5       .
// LAMB     Daily       Red     6       .
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// @version=4
study("WE-Angels", "WE-Angels", overlay=true, precision = 4, linktoseries = true, max_bars_back = 1000, max_lines_count = 500)

// Exponential Moving Averages
showEMA = input(false, title="EMA")

// Simple Moving Averages
showSMA                                 = input(true, title="SMA")
showIndicatorAngelSMA                   = input(false, title="SMA (Angel Rainbow)")
showIndicatorAngelSMAYearly             = input(false, title="SMA (Yearly)")

showIndicatorPICycle                    = input(true,  title="PI Cycle")
showIndicatorPICycleInverse             = input(true, title="PI Cycle Inverse")
showIndicatorDCA                        = input(true, title="DCA")
showIndicatorLongShort                  = input(true, title="Long or Short")
showIndicatorBullBearAverage            = input(true, title="Bull Bear Average")
showIndicatorMayerMultiplier            = input(true, title="Mayer Multiplier")
showIndicatorGoldenDeathWithAverages    = input(true, title="Golden/Death Crosses with Averages")
// showIndicatorVolumeProfileVisibleRange  = input(false, title="VPVR (Volume Profile Visible Range)")
showIndicatorDowJones                   = input(false, title="Dow Jones")

// showIndicatorAngelManifestation = input(true,  title="Angel Manifestation (111)")
// showIndicatorAngelEnjoy         = input(true,  title="Angel Enjoy (222)")
// showIndicatorAngelBalance       = input(false, title="Angel Balance (333)")
// showIndicatorAngelGuide         = input(false, title="Angel Guide (444)")
// showIndicatorAngelChange        = input(false, title="Angel Change (555)")
// showIndicatorAngelReality       = input(false, title="Angel Reality (666)")
// showIndicatorAngelTrust         = input(true,  title="Angel Trust (777)")
// showIndicatorAngelEnergy        = input(false, title="Angel Energy (888)")
// showIndicatorAngelLevel         = input(false, title="Angel Level (999)")
showIndicatorDebug              = input(false, title="DEBUG")

////////////////////////////////////////////////////////////////////////////////
// SMA & ANGEL NUMBERS
////////////////////////////////////////////////////////////////////////////////

// ANGEL 111 - One is a powerful number for manifestation
// When you see 111, think of the universe as taking a screenshot of your frame of mind
// Whatever is going on—all your thoughts, visualizations, goals, and dreams— they are going to be replicated.
// So when you see this sequence, ensuring your thoughts and energy are focused on what you want can help usher that energy into existence
// according to numerology.
smaAngel = sma(close, 111)
smaAngelData = if (showIndicatorPICycle)
    smaAngel

// ANGEL 222 - In this sometimes-rigidly goal-prioritizing world where we live, 
// it can be easy to get tripped up on not being at a certain progress point, which can lead you to compare yourself to others. 
// When you see the number two everywhere, it can be interpreted as an angel-number reminder to be present, enjoy the moment, 
// and trust that you are exactly where you are supposed to be.
smaEnjoy = sma(close, 222)

// ANGEL 333 - This sequence is a prompt from the angels to bring more balance into your life.
// They want you to look at the areas of your life that are not fully rounded out, and self-correct
// Get some meditation going, embark on that workout routine, and finally start that vision board you’ve been procrastinating on.
smaBalance = sma(close, 333)

// ANGEL 444 - If you’re navigating a challenge, and have been trying to get guidance from your spirit guide or signs from the universe
// noticing the number four all around you can serve as evidence that you’re being heard.
// Your angels are guiding you, surrounding you, and answering your prayers of protection
// It may be a time of struggle, but you are being led into the light by your guardians.
smaGuide = sma(close, 444)

// ANGEL 555 When you start spotting 555, that means change is coming. 
// Before you get worried, know that the change is a good thing, even if it might be uncomfortable.
// Change can be seen as a negative thing, but with the right mind-set and the right alignment to your goals, 
// it’s actually your angel’s way of readjusting your life to fit with what you want to happen.
// Life will look different when you get what you want.
smaChange = sma(close, 555)

// ANGEL 666 Are 666s showing up seemingly everywhere in your life? 
// If so, the angels may be trying to give you a bit of a reality check. 
// This is a strong message from your angel guardians to take personal responsibility in your own life, and ask yourself in all areas
// ‘what do I need to do differently?’”
smaReality = sma(close, 666)

// ANGEL 777 -Repeating sevens are basically the universe urging you to relax and let go of your fears for the future. 
// Give up your control of what’s going to happen next. 
// And instead, embrace the present and trust that everything is always working out for you.
smaTrust = sma(close, 777)

// ANGEL 888 - The number eight is about infinity, or the endless loop of energy.
// Seeing it means that you are effortlessly going with the natural flow and rhythm of what your angels have in store for you.
// In other words, it’s like a pat on the back and a reminder to be grateful for how far you’ve come.
smaEnergy = sma(close, 888)

// ANGEL 999 - You’ll likely see repeating nines when you’ve been working on something for a while, and it brings good news in tow.
// This number means that the cycle of what you have been doing is reaching completion.
// You are at the finish line of your end goals, and it’s time to start leveling up to visualize some new ones.
smaLevel = sma(close, 999)

////////////////////////////////////////////////////////////////////////////////
// SMA Helpers
////////////////////////////////////////////////////////////////////////////////
sma3  = sma(close, 3)
sma3Data = if (showSMA)
    sma3

sma7 = sma(close, 7)
sma7Data = if (showSMA)
    sma7

sma10 = sma(close, 10)
sma10Data = if (showSMA)
    sma10

// SMA
sma21 = sma(close, 21)
sma21Data = if (showSMA)
    sma21

// Number 28 - The Trusting Lamb 
smaLamb = sma(close, 28)
smaLambData = if (showSMA)
    smaLamb

sma50 = sma(close, 50)
sma50Data = if (showIndicatorGoldenDeathWithAverages)
    sma50

sma200 = sma(close, 200)
sma200Data = if (showIndicatorGoldenDeathWithAverages)
    sma200

sma350 = sma(close, 350)

sma1Y = sma(close, 365)
sma1YData = if (showIndicatorAngelSMAYearly)
    sma1Y

sma2Y  = sma(close, 730)
sma2YData = if (showIndicatorAngelSMAYearly)
    sma2Y

sma3Y  = sma(close, 1095)
sma3YData = if (showIndicatorAngelSMAYearly)
    sma3Y

sma4Y  = sma(close, 1460)
sma4YData = if (showIndicatorAngelSMAYearly)
    sma4Y

sma7Y  = sma(close, 2555)
sma7YData = if (showIndicatorAngelSMAYearly)
    sma7Y

smaBB = sma200 * 2.1
smaBBData = if (showIndicatorBullBearAverage)
    smaBB

smaDCA = sma200 * 2.4
smaDCAData = if (showSMA)
    smaDCA

////////////////////////////////////////////////////////////////////////////////
// PLOTS (SMA)
////////////////////////////////////////////////////////////////////////////////

// plot(sma3Data, color=color.blue, linewidth=1, transp=0, title="SMA 3")
// plot(sma7Data, color=color.blue, linewidth=1, transp=0, title="SMA 7")
plot(sma10Data, color=color.green, linewidth=1, transp=0, title="SMA 10")
plot(sma21Data, color=color.orange, linewidth=1, transp=0, title="SMA 21")

// plot(smaLambData, color=color.green, linewidth=1, transp=0, title="SMA LAMB")

// showIndicatorGoldenDeathWithAverages
plot(sma50Data, color=color.blue, linewidth=2, transp=0, title="SMA 50")
plot(sma200Data, color=color.white, linewidth=2, transp=0, title="SMA 200")
plot(smaBBData, color=color.aqua, linewidth=1, transp=0, title="SMA BB")
plot(smaDCAData, color=color.aqua, linewidth=1, transp=0, title="SMA DCA")

// FAIR
fairValue = if (showIndicatorPICycle)
    sma350 * 2
plot(fairValue, color=color.white, transp=0, linewidth=2, title="FAIR")

// SMA ANGELS
plot(smaAngelData, color=color.yellow, linewidth=2, transp=0, title="ANGEL")

smaEnjoyData = if (showIndicatorAngelSMA)
    smaEnjoy
plot(smaEnjoyData, color=color.gray, linewidth=1, transp=0, title="ENJOY")

smaBalanceData = if (showIndicatorAngelSMA)
    smaBalance
plot(smaBalanceData, color=color.gray, linewidth=1, transp=0, title="BALANCE")

smaGuideData = if (showIndicatorAngelSMA)
    smaGuide
plot(smaGuideData, color=color.gray, linewidth=1, transp=0, title="GUIDE")

smaChangeData = if (showIndicatorAngelSMA)
    smaChange
plot(smaChangeData, color=color.blue, linewidth=2, transp=0, title="CHANGE")

smaRealityData = if (showIndicatorAngelSMA)
    smaReality
plot(smaRealityData, color=color.gray, linewidth=1, transp=0, title="REALITY")

smaTrustData = if (showIndicatorAngelSMA)
    smaTrust
plot(smaTrustData, color=color.aqua, linewidth=1, transp=0, title="TRUST")

smaEnergyData = if (showIndicatorAngelSMA)
    smaEnergy
plot(smaEnergyData, color=color.orange, linewidth=1, transp=0, title="ENERGY")

smaLevelData = if (showIndicatorAngelSMA)
    smaLevel
plot(smaLevelData, color=color.red, linewidth=1, transp=0, title="LEVEL")

// GROWTH
// plot(sma350, color=color.white, linewidth=1, transp=0, title="GROWTH")

// YEARLY
plot(sma1YData, color=color.white, linewidth=1, transp=0, title="1Y")
// plot(sma2YData, color=color.gray, linewidth=1, transp=0, title="2Y")
// plot(sma3YData, color=color.blue, linewidth=1, transp=0, title="3Y")
// plot(sma4YData, color=color.orange, linewidth=1, transp=0, title="4Y")
// plot(sma7YData, color=color.gray, linewidth=1, transp=0, title="7Y")


////////////////////////////////////////////////////////////////////////////////
// EMA & ANGEL NUMBERS 
// TODO STUDY higher SMA/EMA cross over/under in bull bear markets
////////////////////////////////////////////////////////////////////////////////
ema3 = ema(close, 3)
ema3Data = if (showEMA)
    ema3
    
ema7 = ema(close, 7)
ema7Data = if (showEMA)
    ema7

ema21 = ema(close, 21)
ema21Data = if (showEMA)
    ema21

// Number 28 - The Trusting Lamb 
emaLamb = ema(close, 28)

ema50 = ema(close, 50)
ema50Data = if (showEMA)
    ema50

ema100 = ema(close, 100)
ema100Data = if (showEMA)
    ema100

ema111 = ema(close, 111)
ema111Data = if (showEMA)
    ema111

ema150 = ema(close, 150)
ema150Data = if (showEMA)
    ema150

// ANGEL Exponential Moving Average
emaAngel = ema(close, 111)
emaAngelData = if (showEMA)
    emaAngel

emaEnjoy = ema(close, 222)
emaBalance = ema(close, 333)

// PLOTS
// plot(ema3Data, color=color.red, linewidth=1, transp=0, title="EMA 3")
// plot(ema7Data, color=color.red, linewidth=1, transp=0, title="EMA 7")

// plot(emaLamb, color=color.red, linewidth=1, transp=0, title="EMA LAMB")

plot(ema21Data, color=color.yellow, linewidth=1, transp=0, title="EMA 21")
plot(ema50Data, color=color.olive, linewidth=1, transp=0, title="EMA 50")
plot(ema111Data, color=color.red, linewidth=2, transp=0, title="EMA 111")
// plot(ema100Data, color=color.red, linewidth=2, transp=0, title="EMA 100")
// plot(ema150Data, color=color.blue, linewidth=1, transp=0, title="EMA 150")

ema200 = ema(close, 200)

// showIndicatorBullBearAverage
emaBB = if (showIndicatorBullBearAverage)
    ema200 * 2.1
plot(emaBB, color=color.green, linewidth=1, transp=0, title="EMA BB")

// plot(emaAngelData, color=color.orange, linewidth=2, transp=0, title="ANGEL EMA")

////////////////////////////////////////////////////////////////////////////////
//
// Signal Core Helper Variables
//
// Calculate and plot the MM2.4 MM4 MM5 multipliers
//
////////////////////////////////////////////////////////////////////////////////

isDailyOrWeekly = if (timeframe.isdaily or timeframe.isweekly)
    1

isMonthly = if (timeframe.ismonthly)
    1
    
isWeekly = if (timeframe.isweekly)
    1

isDaily = if (timeframe.isdaily)
    1

isFourHour = if (timeframe.period == "240")
    240
    
isHour = if (timeframe.period == "60")
    60
    
isThrityMinute = if (timeframe.period == "30")
    30
    
isFifthteenMinute = if (timeframe.period == "15")
    15
    
isFiveMinute = if (timeframe.period == "5")
    5
    
isMinute = if (timeframe.period == "1")
    1

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Mayer Multiplier
//
// Calculate and plot the MM2.4 MM4 MM5 multipliers
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

mm5Data = if (showIndicatorMayerMultiplier)
    mm5 = sma200 * 5
mm4Data = if (showIndicatorMayerMultiplier)
    mm4 = sma200 * 4
mm24Data = if (showIndicatorMayerMultiplier)
    mm24 = sma200 * 2.4

plot(mm5Data, color=color.red,  transp=0, linewidth=1, title="MM 5")
plot(mm4Data, color=color.orange,  transp=0, linewidth=1, title="MM 4")
plot(mm24Data, color=color.yellow, transp=0, linewidth=1, title="MM 2.4") 

signalDeathCross = if(showIndicatorGoldenDeathWithAverages and crossover(sma200, sma50))
    sma200
plotshape((isMinute or isFiveMinute or isFifthteenMinute or isFourHour or isDaily) and signalDeathCross, style=shape.xcross, color=color.red, size=size.small, location=location.abovebar  , transp=0, textcolor=color.white, text="DEATH", title='DEATH')

signalGoldenCross = if (showIndicatorGoldenDeathWithAverages and crossunder(sma200, sma50))
    sma200
plotshape((isMinute or isFiveMinute or isFifthteenMinute or isFourHour or isDaily) and signalGoldenCross, style=shape.xcross, color=color.yellow, size=size.small, location=location.abovebar  , transp=0, textcolor=color.white, text="GOLDEN", title='GOLDEN')

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// SIGNAL - CYCLE (Green/Red)
//
// Alertcondition for alert configuration the index allows for natural ordering.
// 
// 1 - CYCLE (Green)    TV Alert SET (CYCLE GREEN)
// 2 - CYCLE (Red)      TV Alert SET (CYCLE RED)
//
// Detect the TOP and BOTTOM in a market, rendered as a RED or GREEN CYCLE 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// DAILY GREEN BOTTOM
signalBottom = if (showIndicatorPICycle)
    crossunder(sma1Y, sma2Y)
plotshape(isDaily and signalBottom, style=shape.labelup, color=color.green, size=size.large, location=location.belowbar, transp=0, textcolor=color.white, text="CYCLE")
alertcondition(signalBottom, title="1 - CYCLE (Green)", message='{"text": "{{ticker}}({{exchange}} {{interval}}) CYCLE (Green)"}')

// DAILY RED TOP
topDetected = if (showIndicatorPICycle)
    crossunder(fairValue, smaAngel)
plotshape(isDaily and topDetected, style=shape.labeldown, color=color.red, size=size.large, location=location.abovebar, transp=0, textcolor=color.white, text="CYCLE")
alertcondition(topDetected, title="2 - CYCLE (Red)", message='{"text": "{{ticker}}({{exchange}} {{interval}}) CYCLE (Red)"}')

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// SIGNAL - DCA (Green/Red)
//
// Alertcondition for alert configuration the index allows for natural ordering.
//
// 3 - DCA (Green Enjoy)    TV Alert SET (DCA GREEN (Enjoy))
// 4 - DCA (Green Balance)  TV Alert SET (DCA GREEN (Balance))
// 5 - DCA (Red)            TV Alert SET (DCA RED)
//
// Dollar Cost Average
// Based on an idea from Thomas for finding a green pre cycle indication
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// DCA GREEN ENJOY
signalRealityBalanceDailyEnjoy = if (timeframe.isdaily)
    crossover(smaReality, smaEnjoy)
plotshape(showIndicatorDCA and signalRealityBalanceDailyEnjoy, style=shape.labelup, size=size.large,  location=location.belowbar, transp=50, color=color.green, textcolor=color.white, text="DCA (ENJOY)")
alertcondition(signalRealityBalanceDailyEnjoy, title="3 - DCA (Green Enjoy)", message='{"text": "{{ticker}} ({{exchange}} {{interval}}) DCA (Green Enjoy)"}')

// DCA GREEN BALANCE
signalRealityBalanceDailyBalance = if (timeframe.isdaily)
    crossover(smaReality, smaBalance)
plotshape(showIndicatorDCA and signalRealityBalanceDailyBalance, style=shape.labelup, size=size.large,  location=location.belowbar, transp=0, color=color.green, textcolor=color.white, text="DCA (BALANCE)")
alertcondition(signalRealityBalanceDailyBalance, title="4 - DCA (Green Balance)", message='{"text": "{{ticker}} ({{exchange}} {{interval}}) DCA (Green Balance)"}')

// DCA RED
detectedPreCycleOut = crossover(sma21, sma200 * 2.4)
plotshape(isDaily and showIndicatorDCA and detectedPreCycleOut, style=shape.labeldown, size=size.normal, transp=20, color=color.red, textcolor=color.white, text="DCA")
alertcondition(detectedPreCycleOut, title="5 - DCA (Red)", message='{"text": "{{ticker}} ({{exchange}} {{interval}}) DCA (Red)"}')


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// SIGNAL - LAMB (Green/Red)
//
// Alertcondition for alert configuration the index allows for natural ordering.
//
// 6 - LAMB (Green)     TV Alert SET (LAMB GREEN)
// 7 - LAMB (Red)       TV Alert SET (LAMB RED)
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// DAILY GREEN/RED LAMB
signalELAMBDailyGreenLimit = if (ema7 < smaReality and ema7 < smaLevel )
    1
signalELAMBDailyGreen = if (isDaily)
    crossover(ema7, sma7)
plotshape(showIndicatorDCA and signalELAMBDailyGreen and signalELAMBDailyGreenLimit, style=shape.labelup, location=location.belowbar, size=size.small, transp=0, color=color.green, textcolor=color.white, text="LAMB", title="LAMB (green)")
alertcondition(signalELAMBDailyGreen and signalELAMBDailyGreenLimit, title="6 - LAMB (Green)", message='{"text": "{{ticker}} ({{exchange}} {{interval}}) LAMB (Green)"}')

// DCA RED LAMB DAILY
// smaBB = sma200 * 2.1
signalELAMBDailyRedLimit = if (ema7 > smaBB)
    1
signalELAMBDailyRed = if (isDaily)
    crossover(sma7, ema7)
plotshape(signalELAMBDailyRedLimit and showIndicatorDCA and signalELAMBDailyRed, style=shape.labeldown, location=location.abovebar, size=size.small, transp=0, color=color.red, textcolor=color.black, text="LAMB", title="LAMB (red)")
alertcondition(signalELAMBDailyRedLimit and signalELAMBDailyRed, title="7 - LAMB (Red)", message='{"text": "{{ticker}} ({{exchange}} {{interval}}) LAMB (Red)"}')


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// SIGNAL - POOH (yellow)
//
// Alertcondition for alert configuration the index allows for natural ordering.
//
// 8 - POOH (Yellow)    TV Alert SET (POOH)
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

signalDailyBearEatingRedLambLimit = if (ema7 < sma10 and ema7 < smaBB and sma21 > fairValue)
    1
signalELAMBDailyBear = if (isDaily)
    crossover(sma7, ema7)
plotshape(showIndicatorDCA and signalELAMBDailyBear and signalDailyBearEatingRedLambLimit, style=shape.labeldown, location=location.abovebar, size=size.small, transp=0, color=color.yellow, textcolor=color.black, text="POOH")
alertcondition(signalELAMBDailyBear, title="8 - POOH", message='{"text": "{{ticker}} ({{exchange}} {{interval}}) POOH (Yellow)"}')

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// SIGNAL - ALPHA ANGEL (Green)
//
// Alertcondition for alert configuration the index allows for natural ordering.
//
// 9 - ALPHA ANGEL (Green)    TV Alert SET (ALPHA ANGEL (Green))
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// WEEKLY ALPHA ANGEL GREEN 
weeklyExpoAngel = crossover(ema7+111, sma7)
weeklyExpo = if (isWeekly and ema7+111 < sma50 and ema7+111 < smaBB )
    weeklyExpoAngel
plotshape(showIndicatorDCA and weeklyExpo, style=shape.labelup, location=location.belowbar, size=size.small, transp=0, color=color.green, textcolor=color.white, text="ALPHA\nANGEL")
alertcondition(signalELAMBDailyBear, title="9 - ALPHA ANGEL (Green)", message='{"text": "{{ticker}} ({{exchange}} {{interval}}) ALPHA ANGEL (Green)"}')


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// SIGNAL - LONG / SHORT ( Green / Red)
//
// Alertcondition for alert configuration the index allows for natural ordering.
//
// 10 - LONG (Green)    TV Alert SET (LONG (Green))
// 11 - SHORT(Red)      TV Alert SET (SHORT (Red))
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Signal Limit 
signalLimit = if (ema3 > smaAngel and smaAngel > smaEnjoy and sma1Y > smaGuide)
    1

// DCA LONG/SHORT
signalLong = crossover(ema3, sma3)
signalLongTimeframe = if (isDailyOrWeekly)
    signalLong
plotshape(signalLimit and showIndicatorLongShort and signalLongTimeframe, style=shape.labelup, location=location.belowbar, size=size.tiny, transp=10, color=color.teal, textcolor=color.white, text="L")

signalShort = crossover(sma3, ema3)
signalShortTimeframe = if (isDailyOrWeekly)
    signalShort
plotshape(signalLimit and showIndicatorLongShort and signalShortTimeframe, style=shape.labeldown, location=location.abovebar, size=size.tiny, transp=10, color=color.red, textcolor=color.white, text="S")


////////////////////////////////////////////////////////////////////////////////
// AUDIT CLEAN UP BELOW
////////////////////////////////////////////////////////////////////////////////
signalLevelTrust = if (isMinute and smaLevel > smaTrust)
    1
signalBull = if (ema7 < emaLamb)
    1
signalBear = if (ema7 > emaLamb)
    1
signalFear = if (ema7 > smaEnjoy and ema7 > smaAngel and smaAngel > emaAngel and sma4Y > sma7Y)
    1
signalEnjoyment = if (ema7 < smaEnjoy)
    1
// TODO configuration point to adjust smaEnergy to smaTrust depending on DCA trust level.
signalTrustUnderLevel = if (smaEnergy < smaLevel and smaEnjoy < smaBalance and smaGuide < smaChange)
    1

//////////////////////////
// DCA SIGNAL - YEARLY //
////////////////////////
signalYearlyTwoOverSevenYear = if (timeframe.period == "1")
    crossover(sma2Y, sma7Y)
plotshape(showIndicatorDCA and signalYearlyTwoOverSevenYear, style=shape.circle, size=size.tiny,  location=location.belowbar, transp=10, color=color.green, textcolor=color.white, text="2Y/7Y")
signalYearlyThreeOverFourYear = if (timeframe.period == "1")
    crossover(sma3Y, sma4Y)
plotshape(showIndicatorDCA and signalYearlyThreeOverFourYear, style=shape.circle, size=size.tiny,  location=location.belowbar, transp=10, color=color.green, textcolor=color.white, text="3Y/4Y")
signalYearlyThreeOverSevenYear = if (timeframe.period == "1")
    crossover(sma3Y, sma7Y)
plotshape(showIndicatorDCA and signalYearlyThreeOverSevenYear, style=shape.circle, size=size.tiny,  location=location.belowbar, transp=10, color=color.green, textcolor=color.white, text="3Y/7Y")

//
// KEEP (Seperate into Angel Average indicators)
//
// // Yearly Reality
// signalRealityAngel = if (timeframe.period == "1")
//     crossunder(sma1Y, smaReality)
// plotshape(showIndicatorDCA and signalRealityAngel, style=shape.circle, location=location.belowbar, size=size.small, transp=0, color=color.aqua, textcolor=color.white, text="YEAR\nREALITY 666")
// signalRealityAngelOver = if (timeframe.period == "1")
//     crossover(sma1Y, smaReality)
// plotshape(showIndicatorDCA and signalRealityAngelOver, style=shape.circle, location=location.abovebar, size=size.small, transp=0, color=color.orange, textcolor=color.white, text="YEAR\nREALITY 666")

// // Yearly Trust
// signalTrustAngel = if (timeframe.period == "1" or timeframe.period == "5")
//     crossunder(sma1Y, smaTrust)
// plotshape(showIndicatorDCA and signalTrustAngel, style=shape.circle, location=location.belowbar, size=size.small, transp=0, color=color.blue, textcolor=color.white, text="YEAR\nTRUST 777")
// signalTrustAngelOver = if (timeframe.period == "1" or timeframe.period == "5")
//     crossover(sma1Y, smaTrust)
// plotshape(showIndicatorDCA and signalTrustAngelOver, style=shape.circle, location=location.abovebar, size=size.small, transp=0, color=color.orange, textcolor=color.white, text="YEAR\nTRUST 777")

// // Yearly Energy
// signalEnergyAngel = if (timeframe.period == "1" or timeframe.period == "5")
//     crossunder(sma1Y, smaEnergy)
// plotshape(showIndicatorDCA and signalEnergyAngel, style=shape.circle, location=location.abovebar, size=size.small, transp=0, color=color.blue, textcolor=color.white, text="YEAR\nENERGY 888")
// signalEnergyAngelOver = if (timeframe.period == "1")
//     crossover(sma1Y, smaEnergy)
// plotshape(showIndicatorDCA and signalEnergyAngelOver, style=shape.circle, location=location.belowbar, size=size.small, transp=0, color=color.red, textcolor=color.white, text="YEAR\nENERGY 888")

// // WARNING Yearly Level diamond
// signalLevelAngel = if (timeframe.period == "1" or timeframe.period == "5")
//     crossunder(sma1Y, smaLevel)
// plotshape(showIndicatorDCA and signalLevelAngel, style=shape.diamond, location=location.abovebar, size=size.small, transp=0, color=color.blue, textcolor=color.white, text="YEAR\nLEVEL 999")
// signalLevelAngelOver = if (timeframe.period == "1")
//     crossover(sma1Y, smaLevel)
// plotshape(showIndicatorDCA and signalLevelAngelOver, style=shape.diamond, location=location.belowbar, size=size.small, transp=0, color=color.red, textcolor=color.white, text="YEAR\nLEVEL 999")


////////////////////////////////////////////////////////////////////////////////
// DGA SIGNAL - ANGEL 111
////////////////////////////////////////////////////////////////////////////////
//
// Angel Average 111
// Study of the Angel Average eventually on both EMA/SMA and relationship with
// the pair plus the relationship with other Angel Averages 
//
////////////////////////////////////////////////////////////////////////////////

// Helper variables
signalIsDaily = if (timeframe.isdaily)
    1

signalIsMinute = if (timeframe.period == "1")
    1
    
// MINUTE / Angel / Yearly
signalAngelOverOneYear = if (timeframe.period == "1")
    crossover(smaAngel, sma1Y)
plotshape(showIndicatorDCA and signalAngelOverOneYear, style=shape.circle, size=size.small,  location=location.belowbar, transp=10, color=color.green, textcolor=color.white, text="ANGEL 1Y")
signalAngelOverOneYearUnder = if (timeframe.period == "1")
    crossunder(smaAngel, sma1Y)
plotshape(showIndicatorDCA and signalAngelOverOneYearUnder, style=shape.circle, size=size.small,  location=location.abovebar, transp=10, color=color.orange, textcolor=color.white, text="ANGEL 1Y")

// MINUTE / Angel / 2 Year
signalAngelOverTwoYear = if (timeframe.period == "1")
    crossover(smaAngel, sma2Y)
plotshape(showIndicatorDCA and signalAngelOverTwoYear, style=shape.circle, size=size.small,  location=location.belowbar, transp=10, color=color.green, textcolor=color.white, text="ANGEL 2Y")
signalAngelOverTwoYearUnder = if (timeframe.period == "1")
    crossunder(smaAngel, sma2Y)
plotshape(showIndicatorDCA and signalAngelOverTwoYearUnder, style=shape.circle, size=size.small,  location=location.abovebar, transp=10, color=color.orange, textcolor=color.white, text="ANGEL 2Y")

// MINUTE / GROWTH / ANGEL green
detectedAngelCreation = if (timeframe.period == "1")
    crossunder(sma350, smaAngel)
plotshape(signalIsMinute and detectedAngelCreation, style=shape.circle, location=location.belowbar, size=size.small, transp=0, color=color.green, textcolor=color.white, text="ANGEL")

// // MINUTE / ANGEL / GROWTH red
detectedAngelDeath = crossunder(smaAngel, sma350)
plotshape(signalIsMinute and detectedAngelDeath, style=shape.circle,  location=location.abovebar, size=size.small, transp=0, color=color.red, textcolor=color.white, text="ANGEL")




///////////////////////////////////////////////////////////////////////////////
//
// Puell Multiple
//
// https://digitalik.net/btc/puell_multiple
///////////////////////////////////////////////////////////////////////////////
miningRevenue = security("QUANDL:BCHAIN/MIREV", "D", close[1], barmerge.gaps_off, barmerge.lookahead_on)
ma365 = security("QUANDL:BCHAIN/MIREV", "D", sma(close, 365)[1], barmerge.gaps_off, barmerge.lookahead_on)
puellMultiple = miningRevenue / ma365

///////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Pi Cycle Bitcoin Top Indicator
//
// Once the short moving average (111-day) moves above the 
// long moving average (350-day times by 2)
// It has been a good time to sell bitcoin
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

longMADays           = input (350,    "Long MA")
shortMADays          = input (111,    "Short MA")
showMA               = input (true,   "Show Moving Averages?", input.bool)
showCross            = input (true,   "Show cross level?", input.bool)
showLabelPICycleTop  = input(true,    "Show label of Pi Cycle Top Cross?", input.bool)
showLabelPICycleDown = input(true,    "Show label of crossback?", input.bool)
decPlaces            = input(0,       "Decimal Places",   input.integer, minval=0, maxval=10)
labelOffset          = input(6,       "Label Offset",     input.integer, minval=0, maxval=100)
labelBgColour        = input(#FFFFFF, "Label Text Color", input.color)

// Percentage variables
piCycleTimeframe  = input("D", "Timeframe [default Daily]",input.resolution)
piCycleSrcData    = security(syminfo.tickerid, piCycleTimeframe, close)
piCycleMultiplier = input(2.0, "Multiplier [default 2.0]", input.float, minval=0, maxval=10 , step=0.01)
piCycleDecPlaces  = input(2, "Decimal Places", input.integer, minval=0, maxval=10)

// Declare functions
priorSum(p, x) => sum(p[1], x - 1)

piCycleCross(P, X, Y , m) => (( priorSum ( P, X ) * Y ) * m - priorSum ( P, Y ) * X ) / ( X - ( Y * m ) )
// piCycleCross ( P, X, Y )    => (( priorSum ( P, X ) * Y)  * 2 - priorSum ( P, Y ) * X ) / ( X - ( Y * 2 ) )

piCyclePercentage(P, X) => 100 - (( P / X ) * 100)

// f_cross_text ( p, x, d ) => p < x ? "Pi Cycle Top Cross Above : " + tostring(int(x*pow(10,d))/pow(10,d)) : "Pi Cycle Cross Down : " + tostring(int(x*pow(10,d))/pow(10,d))
piCyclePercentageText ( P, d ) => tostring(int(P*pow(10,d))/pow(10,d))

pi_cross   = security ( syminfo.tickerid, piCycleTimeframe, piCycleCross ( piCycleSrcData, longMADays, shortMADays, piCycleMultiplier ))
percentage = piCyclePercentage ( close, pi_cross )

anticipatedCrossFunction(P, X, Y) => ( X * (Y - 1) * sma(P, Y - 1) - Y * (X - 1) * sma(P, X - 1) * 2) / (Y*2 - X)

textEQ( p, x, d ) => 
    textOpen    = "\nOpen: "     + tostring(round(open))
    textSMA21   = "\nSMA21: "    + tostring(round(sma21))
    textSMA50   = "\nSMA50: "    + tostring(round(sma50)) 
    textSMA200  = "\nSMA200: "   + tostring(round(sma200))
    
    textFAIR    = "\nFAIR: "     + tostring(round(fairValue))
    textAngel   = "\n\nANGEL: "  + tostring(round(smaAngel))
    textEnjoy   = "\nENJOY: "    + tostring(round(smaEnjoy))
    textBalance = "\nBALANCE: "  + tostring(round(smaBalance))
    textGuide   = "\nGUIDE: "    + tostring(round(smaGuide))
    textChange  = "\nCHANGE: "   + tostring(round(smaChange))
    textReality = "\nREALITY: "  + tostring(round(smaReality))
    textTrust   = "\nTRUST: "    + tostring(round(smaTrust))
    textEnergy  = "\nENERGY: "   + tostring(round(smaEnergy)) 
    textLevel   = "\nLEVEL: "    + tostring(round(smaLevel))
    textAngelAverages = textFAIR + textAngel + textEnjoy + textBalance + textGuide + textChange + textReality + textTrust + textEnergy + textLevel
    
    // Show default.
    textFairAngel = "\nFair: " + tostring(round(fairValue - smaAngel))
    textDcaAngel  = "\nDCA: "  + tostring(round(smaDCAData - sma21))
    textCycle     = "\nCycle: "     + tostring(int(x*pow(10,d))/pow(10,d)) + "\nCycle: " + piCyclePercentageText(percentage, piCycleDecPlaces) + " %" + "\nPuell: " + tostring(puellMultiple, '#.##')
    textDefault   = textCycle       + textFairAngel + textDcaAngel
    textVisual    = "WE Angels\n"   + textDefault
    
    text = p < x ? textVisual + "\n\n" + "Current:" + tostring(round(close)) + textOpen + textSMA21 + textSMA50 + textSMA200 + textAngelAverages + "\n" : textVisual

///////////////////////////////////////////////////////////////////////////////
// CALCULATIONS
///////////////////////////////////////////////////////////////////////////////

longMA  = security(syminfo.tickerid, "D", sma(close, longMADays)*2)
shortMA = security(syminfo.tickerid, "D", sma(close, shortMADays))
srcData = security(syminfo.tickerid, "D", close)
srcDataDebug = if (showIndicatorDebug)
    srcData

piCross            = security(syminfo.tickerid, "D", piCycleCross ( srcData, longMADays, shortMADays, piCycleMultiplier ))
piAnticipatedCross = security(syminfo.tickerid, "D", anticipatedCrossFunction ( srcData, longMADays, shortMADays ))

// DISPLAY LABEL 
// labelText = textEQ ( srcDataDebug, piCross, decPlaces ) + textEQ2 ( srcData, piAnticipatedCross, decPlaces )
labelText = textEQ ( srcDataDebug, piCross, decPlaces )
labelXLoc = time_close + (( time_close - time_close[1] ) * labelOffset ) // Set Label offset
label = label.new (labelXLoc, hlc3, labelText , xloc.bar_time, yloc.price, color.black, label.style_label_left, color.white, size=size.normal )
label.delete ( label[1] )   // Delete Previous Label


// Determine and plot the Pi Cross and Anticipated Pi Cross
piCycleTop = crossunder(longMA, shortMA) ? srcData + (srcData/100 * 10) : na
piCycleDown = crossover(longMA, shortMA) ? srcData - (srcData/100 * 20) : na

piCycleTop2 = crossunder(piAnticipatedCross, srcData) ? srcData + (srcData/100 * 90) : na
piCycleDown2 = crossover(piAnticipatedCross, srcData) ? srcData - (srcData/100 * 70) : na

///////////////////////////////////////////////////////////////////////////////
// plot(showMA ? longMA : na, color=color.green)         // show the long MA
// plot(showMA ? shortMA : na, color=color.orange)       // show the short MA
// plot(showCross ? piCross : na, color=color.aqua)       // show the MA cross level

plot(showIndicatorPICycleInverse ? piCross : na, color=color.aqua)
plot(showIndicatorPICycleInverse ? piAnticipatedCross : na, color=color.fuchsia, offset = 1 )

// Show the Anticipated Pi Cycle Top
// plotshape (showLabelPICycleTop and i_show_anticip and not piCycleTop ? piCycleTop2 : na, style=shape.labeldown, size=size.normal, text="Anticipated Pi Cycle top\n on next bar\n", color=color.red, textcolor=color.white, location=location.absolute)
// bgcolor (showLabelPICycleTop and crossunder(piAnticipatedCross, srcData) ? color.orange : na, transp=60)

// // Show when the long MA is anticipated to cross above the short MA (Pi Cycle Down)
// plotshape (showLabelPICycleDown and i_show_anticip and not piCycleDown ? piCycleDown2 : na, style=shape.labelup, size=size.normal, text="Anticipated Long MA above short MA \n on next bar\n", color=color.green, textcolor=color.white, location=location.absolute)
// bgcolor (showLabelPICycleDown and crossover(piAnticipatedCross, srcData) ? color.blue : na, transp=60)

// Show the Pi Cycle Top
// plotshape (showLabelPICycleTop ? piCycleTop : na, style=shape.labeldown, size=size.normal, text="Pi Cycle top", color=color.red, textcolor=color.white, location=location.absolute)
// bgcolor (showLabelPICycleTop and crossunder(longMA, shortMA) ? color.red : na, transp=60)

// // Show when the long MA crossed above the short MA (Pi Cycle Down)
// plotshape (showLabelPICycleDown ? piCycleDown : na, style=shape.labelup, size=size.normal, text="Long MA above short MA", color=color.green, textcolor=color.white, location=location.absolute)
// bgcolor (showLabelPICycleDown and crossover(longMA, shortMA) ? color.lime : na, transp=60)


//***********
// Add the alert conditions
//***********
// remember: the alertcondition does not start alerts but creates the condition. The alerts must always be created manually in the Create Alert dialog box
// alertcondition (crossunder(longMA, shortMA), title="Pi Cycle top", message="Pi Cycle top")
// alertcondition (crossover(longMA, shortMA), title="Long MA above short MA", message="Long MA above short MA"



////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// DJI
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// securityDowJones = security("TVC:DJI", "D", close)
// plot(showIndicatorDowJones ? securityDowJones : na)

////////////////////////////////////////////////////////////////////////////////
