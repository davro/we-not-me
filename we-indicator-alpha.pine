////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// WE not ME (Bitcoin Indicator Alpha)
//
// Telegram: https://t.me/we_not_me
//
// David Stevens <mail.davro@gmail.com>
// 
// Donations are accepted here
// Bitcoin: 3Ph9wP4vgASFbFP9DAabZETycXY66ebA8Y
// 
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// @version = 4
study("WE Alpha", "WE Alpha", false, format.price, precision = 2)

////////////////////////////////////////////////////////////////////////////////
// WE - MACD 
////////////////////////////////////////////////////////////////////////////////

fast_length     = input(title="Fast Length", type=input.integer, defval=12)
slow_length     = input(title="Slow Length", type=input.integer, defval=26)
src             = input(title="Source", type=input.source, defval=close)
signal_length   = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 9)
sma_source      = input(title="Simple MA(Oscillator)", type=input.bool, defval=false)
sma_signal      = input(title="Simple MA(Signal Line)", type=input.bool, defval=false)

// Plot colors
col_grow_above = #26A69A
col_grow_below = #FFCDD2
col_fall_above = #B2DFDB
col_fall_below = #EF5350
col_macd = #0094ff
col_signal = #ff6a00

// Calculating
fast_ma = sma_source ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal

// Plots
plot(hist, title="HISTOGRAM", style=plot.style_area, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below) ), transp=20)
plot(macd, title="MACD", color=col_macd, linewidth=2, transp=0)
plot(signal, title="SIGNAL", color=col_signal, linewidth=2, transp=0)

// Mac golden cross
signalGoldenCross = if (crossover(macd, signal)) 
    signal
plotshape(signalGoldenCross, style=shape.circle, color=color.green, size=size.small, location=location.absolute, transp=0, textcolor=color.white)

// Mac death cross
signalDeathCross = if (crossunder(macd, signal)) 
    signal
plotshape(signalDeathCross, style=shape.circle, color=color.red, size=size.small, location=location.absolute, transp=0, textcolor=color.white)

////////////////////////////////////////////////////////////////////////////////
//
// WE - Chaikin Money
//
////////////////////////////////////////////////////////////////////////////////

length = input(20, minval=1)
ad = close==high and close==low or high==low ? 0 : ((2*close-low-high)/(high-low))*volume
mf = sum(ad, length) / sum(volume, length) * macd * 5
// check for negative and paint red
// plot(mf, color=#459915, title="MF", linewidth=3)

signalMoneyFlowColor = if (signal > macd)
    color.red
else
    color.green

plot(mf, color=signalMoneyFlowColor, title="FLOW", linewidth=4)
hline(0, color=#459915, title="ZERO", linestyle=hline.style_dashed)

///////
// signalTest = if (macd > signal and crossover(mf, macd)) 
signalTest = if (mf > macd and macd > signal and crossover(mf, macd)) 
    mf
plotshape(signalTest, style=shape.circle, color=color.yellow, size=size.tiny, location=location.absolute, transp=50, textcolor=color.white)

